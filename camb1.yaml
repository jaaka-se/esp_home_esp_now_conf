esphome:
  name: camb1
  includes:
  - Mesh32RC.h

esp32:
  board: esp32dev
  framework:
    type: arduino



# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret api_pwd

ota:
  password: !secret ota_pwd

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pwd
  power_save_mode: none
  reboot_timeout: 24h

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Camb1 Fallback Hotspot"
    password: !secret ota_pwd


# Example configuration entry AI-thinker
esp32_camera:
  name: camb1
  external_clock:
    pin: GPIO0
    frequency: 20MHz
  i2c_pins:
    sda: GPIO26
    scl: GPIO27
  data_pins: [GPIO5, GPIO18, GPIO19, GPIO21, GPIO36, GPIO39, GPIO34, GPIO35]
  vsync_pin: GPIO25
  href_pin: GPIO23
  pixel_clock_pin: GPIO22
  power_down_pin: GPIO32

  # Image settings
  resolution: 1280x1024
  horizontal_mirror: False
  vertical_flip: False
 # ...

custom_component:
  - lambda: |-
        Mesh32RC::begin(9);
        Mesh32RC::on("ESP32 camb1", [](const uint8_t* st, uint8_t l) {
        	//String st = MeshRC::getValue();
          ESP_LOGD("ESP32 camb1", "Unhandled mesage: ESP32 camb1 %s", st);
         });
        return {};

# Pir sensor  
binary_sensor:
  - platform: gpio
    pin: GPIO13
    name: "Camb1 PIR Sensor"
    device_class: motion

# wifi_signal sensor
sensor:
  - platform: wifi_signal
    name: "Cam1WiFi Signal Sensor"
    update_interval: 60s

# Flashlight
output:
  - platform: gpio
    pin: GPIO4
    id: gpio_4
    
light:
  - platform: binary
    output: gpio_4
    name: camb1 light

switch:
  - platform: template
    name: "camb1_Reboot"
    optimistic: true
    on_turn_on:
        - lambda: ESP_LOGD("camb1", "reboot started");
            Mesh32RC::Reboot();
          

web_server:
  port: 80
  auth:
    username: camadmin
    password: !secret web_server_password

